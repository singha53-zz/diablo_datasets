}
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
library(mixOmics)
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
panel.ellipses = function(x, y, phenotye = phenotype, pch = par("pch"), col.lm = "red", axes = FALSE,
...) {
ind.gp = matrice = cdg = variance = list()
for(i in 1:nlevels(phenotype)){
ind.gp[[i]] = which(as.numeric(phenotype)==i)
}
matrice = lapply(ind.gp, function(z){matrix(c(x[z], y[z]), ncol = 2)})
cdg = lapply(matrice, colMeans)
variance = lapply(matrice, var)
library(ellipse)
coord.ellipse = lapply(1:nlevels(phenotype), function(x){ellipse(variance[[x]], centre = cdg[[x]], ellipse.level = 0.95)})
max.ellipse = sapply(coord.ellipse, function(x){apply(x, 2, max)})
min.ellipse = sapply(coord.ellipse, function(x){apply(x, 2, min)})
ind.names <- names(Y)
cex = 0.5
plot(x, y, xlab = "X.label", ylab = "Y.label", col=color.mixo(as.numeric(phenotype)), pch=20, axes=axes,
xlim = c(min(x, min.ellipse[1, ]), max(x, max.ellipse[1, ])), ylim = c(min(y, min.ellipse[2, ]), max(y, max.ellipse[2, ])))
#text(x, y, ind.names, col = col, cex = cex)
box()
for (z in 1:nlevels(phenotype)){
points(coord.ellipse[[z]], type = "l", col = color.mixo(c(1:nlevels(phenotype))[z]))
}
}
splotMatPlot = function(x, y, phenotype, ptype, groupOrder){
if(names(ptype) == "cor"){
plot(1, type = "n", axes = FALSE)
r = round(cor(x, y), 2)
text(1, 1, labels=r, cex = 0.6/strwidth(r)*r)
box()
}
if(names(ptype) == "scatter"){
panel.ellipses(x=x, y=y, phenotype = phenotype)
}
if(names(ptype) == "lab"){
plot(1, type = "n", axes = FALSE)
ind = as.numeric(unlist(lapply(strsplit(ptype, "_"), unique)))
text(x=1, y=1, labels=colnames(VarX)[ind], cex = 2)
box()
}
if(names(ptype) == "bar"){
phenotype2 <- factor(as.character(phenotype), levels = groupOrder)
boxplot(x ~ phenotype2, horizontal=TRUE, axes = FALSE, ylim = c(min(x)-3, max(x)),
col= color.mixo(match(levels(phenotype2), levels(phenotype))))
axis(4, at=1:4, labels=levels(phenotype2))
}
if(names(ptype) == "stackedbar"){
bars <- table(phenotype2)
barplot(bars, col= color.mixo(match(levels(phenotype2), levels(phenotype))),
axes = FALSE)
axis(4, at=seq(0,max(bars),length.out=5), labels=seq(0,max(bars),length.out=5))
}
}
par(mfrow = c(numberOfRows, numberOfCols), mar = rep.int(1/2, 4), oma = c(2,2,2,2))
for(i in 1:numberOfRows){
for(j in 1:numberOfCols){
ptype <- unlist(lapply(plotType, function(x){
intersect(paste(i,j,sep="_"), x)
}))
splotMatPlot(x=VarX[, i], y=VarX[, j], phenotype = phenotype, ptype, groupOrder)
if(i == 1 & j %in% seq(2, numberOfRows, 1)){Axis(side = 3, x=VarX[, i])}
if(j == numberOfRows & i %in% seq(1, numberOfRows-1, 1)){Axis(side = 4, x=VarX[, i])}
}
}
par(mfrow = c(numberOfRows, numberOfCols), mar = rep.int(1/2, 4), oma = c(2,2,2,2))
for(i in 1:numberOfRows){
for(j in 1:numberOfCols){
ptype <- unlist(lapply(plotType, function(x){
intersect(paste(i,j,sep="_"), x)
}))
splotMatPlot(x=VarX[, i], y=VarX[, j], phenotype = phenotype, ptype, groupOrder)
if(i == 1 & j %in% seq(2, numberOfRows, 1)){Axis(side = 3, x=VarX[, i])}
if(j == numberOfRows & i %in% seq(1, numberOfRows-1, 1)){Axis(side = 4, x=VarX[, i])}
}
}
i
j
phenotype
phenotype = Y
par(mfrow = c(numberOfRows, numberOfCols), mar = rep.int(1/2, 4), oma = c(2,2,2,2))
for(i in 1:numberOfRows){
for(j in 1:numberOfCols){
ptype <- unlist(lapply(plotType, function(x){
intersect(paste(i,j,sep="_"), x)
}))
splotMatPlot(x=VarX[, i], y=VarX[, j], phenotype = phenotype, ptype, groupOrder)
if(i == 1 & j %in% seq(2, numberOfRows, 1)){Axis(side = 3, x=VarX[, i])}
if(j == numberOfRows & i %in% seq(1, numberOfRows-1, 1)){Axis(side = 4, x=VarX[, i])}
}
}
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
#################################################
#
# Figure1_brcaAnalysis.R
# Date: January 09, 2015
# Author: Amrit Singh
#
#################################################
# load libraries
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
# import datasets
load("~/Dropbox/Manuscript/1-data/manuscriptFiles/trainTestDatasetsNormalized.RDATA")
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
## Make figures
# 0) Figure 1A: Path diagram made in ppt
#------------------------------------
#
# 1) Figure 1B: Component Plots
#
#------------------------------------
# Note: groupOrder controls the order of the boxplots in the component plot
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
object=result
Y=Y
ncomp = 1
groupOrder = c("LumA","LumB","Her2", "Basal")
library(mixOmics)  ## needed for color.mixo
phenotype = Y
Var = object$variates
if (!is.factor(Y))
stop(gettextf("Y must be a factor!"))
if (length(ncomp) != 1)
stop(gettextf("You can only choose one component"))
VarX <- do.call(cbind, lapply(Var, function(i) i[, ncomp]))
numberOfCols <- ncol(VarX)
numberOfRows <- numberOfCols - 1
mat <- matrix(0, nrow = numberOfRows, ncol = numberOfRows)
for(i in 1:nrow(mat)){
for(j in 1:ncol(mat)){
mat[i,j] <- paste(i,j, sep="_")
}
}
plotType = list(cor=mat[lower.tri(mat)], scatter=mat[upper.tri(mat)],
lab=diag(mat),
bar=paste(1:(numberOfRows-1), numberOfCols, sep="_"),
stackedbar=paste(numberOfRows, numberOfCols, sep="_"))
par(mfrow = c(numberOfRows, numberOfCols), mar = rep.int(1/2, 4), oma = c(2,2,2,2))
for(i in 1:numberOfRows){
for(j in 1:numberOfCols){
ptype <- unlist(lapply(plotType, function(x){
intersect(paste(i,j,sep="_"), x)
}))
splotMatPlot(x=VarX[, i], y=VarX[, j], phenotype = phenotype, ptype, groupOrder)
if(i == 1 & j %in% seq(2, numberOfRows, 1)){Axis(side = 3, x=VarX[, i])}
if(j == numberOfRows & i %in% seq(1, numberOfRows-1, 1)){Axis(side = 4, x=VarX[, i])}
}
}
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
#################################################
#
# Figure1_brcaAnalysis.R
# Date: January 09, 2015
# Author: Amrit Singh
#
#################################################
# load libraries
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
# import datasets
load("~/Dropbox/Manuscript/1-data/manuscriptFiles/trainTestDatasetsNormalized.RDATA")
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
## Make figures
# 0) Figure 1A: Path diagram made in ppt
#------------------------------------
#
# 1) Figure 1B: Component Plots
#
#------------------------------------
# Note: groupOrder controls the order of the boxplots in the component plot
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
VarX <- as.data.frame(do.call(cbind, lapply(object$variates, function(i) i[, ncomp])))
object = result
VarX <- as.data.frame(do.call(cbind, lapply(object$variates, function(i) i[, ncomp])))
lm
rm(VarX)
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
i
Var
VarX
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
assign("Var", Var, .GlobalEnv)
Var = object$variates
assign("Var", Var, .GlobalEnv)
VarX <- as.data.frame(do.call(cbind, lapply(Var, function(i) i[, ncomp])))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
#################################################
#
# Figure1_brcaAnalysis.R
# Date: January 09, 2015
# Author: Amrit Singh
#
#################################################
# load libraries
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
# import datasets
load("~/Dropbox/Manuscript/1-data/manuscriptFiles/trainTestDatasetsNormalized.RDATA")
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
## Make figures
# 0) Figure 1A: Path diagram made in ppt
#------------------------------------
#
# 1) Figure 1B: Component Plots
#
#------------------------------------
# Note: groupOrder controls the order of the boxplots in the component plot
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
datNames <- colnames(VarX)
library(mixOmics)  ## needed for color.mixo
phenotype = Y
VarX <- do.call(cbind, lapply(Var, function(i) i[, ncomp]))
datNames <- colnames(VarX)
datNames
VarX <- do.call(cbind, lapply(object$varaites, function(i) i[, ncomp]))
datNames <- colnames(VarX)
datNames
ncomp = 1
VarX <- do.call(cbind, lapply(object$varaites, function(i) i[, ncomp]))
datNames <- colnames(VarX)
datNames
ncomp
object = result
VarX <- do.call(cbind, lapply(object$varaites, function(i) i[, ncomp]))
datNames <- colnames(VarX)
datNames
colnames(VarX)
head(VarX)
object$varaites
#################################################
#
# Figure1_brcaAnalysis.R
# Date: January 09, 2015
# Author: Amrit Singh
#
#################################################
# load libraries
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
# import datasets
load("~/Dropbox/Manuscript/1-data/manuscriptFiles/trainTestDatasetsNormalized.RDATA")
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
object = result
VarX <- do.call(cbind, lapply(object$variates, function(i) i[, ncomp]))
colnames(VarX)
ncomp
ncomp = 1
VarX <- do.call(cbind, lapply(object$variates, function(i) i[, ncomp]))
colnames(VarX)
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
#################################################
#
# Figure1_brcaAnalysis.R
# Date: January 09, 2015
# Author: Amrit Singh
#
#################################################
# load libraries
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/diablo.perf_diablo.R")
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
# import datasets
load("~/Dropbox/Manuscript/1-data/manuscriptFiles/trainTestDatasetsNormalized.RDATA")
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
## Make figures
# 0) Figure 1A: Path diagram made in ppt
#------------------------------------
#
# 1) Figure 1B: Component Plots
#
#------------------------------------
# Note: groupOrder controls the order of the boxplots in the component plot
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
y
Y
levels(Y)
source("~/Documents/TRI/mixOmics.org:DIABLO/functions/visualizationFunctions.R")
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
#################################################
#
# Figure1_brcaAnalysis.R
# Date: April 01, 2016
# Author: Amrit Singh
#
#################################################
# load libraries
WhereAmI <- "~/Dropbox/Manuscript/mixOmics.org:DIABLO/"
source(paste0(WhereAmI, "functions/diablo.perf_diablo.R"))
source(paste0(WhereAmI, "functions/visualizationFunctions.R"))
# import datasets
load(paste0(WhereAmI, "1-Data & Preprocessing/breastCancer/data/trainTestDatasetsNormalized.RDATA"))
#############################################################
#
# Fit DIABLO to breast cancer datasets
#
#############################################################
Y <- droplevels(pam50Train0$Call)
names(Y) <- rownames(pam50Train0)
X <- list(mRNA = mrnaTrain0, miRNA = mirnaTrain0, CpGs = methTrain0, Proteins = protTrain0)
all(names(Y) == rownames(X[[1]]))
all(names(Y) == rownames(X[[2]]))
all(names(Y) == rownames(X[[3]]))
all(names(Y) == rownames(X[[4]]))
dim(X[[1]]); dim(X[[2]]); dim(X[[3]]); dim(X[[4]]);
ncomp <- rep(3, length(X))
nfolds <- 10
folds <- 5
design <- matrix(1, nrow = 4, ncol = 4)
diag(design) <- 0
keepX = list(rep(10, 3), rep(10, 3), rep(10, 3), rep(10, 3))
result = diablo(X = X, Y = Y, ncomp = ncomp,
keepX = keepX, design = design,
mode = "regression", bias = FALSE)
feat1 <- lapply(result$loadings, function(x)
apply(x, 2, function(i) names(i)[which(i != 0)]))
## Make figures
# 0) Figure 1A: Path diagram made in ppt
#------------------------------------
#
# 1) Figure 1B: Component Plots
#
#------------------------------------
# Note: groupOrder controls the order of the boxplots in the component plot
plotIndiv_diablo(object=result, Y=Y, ncomp = 1, groupOrder = c("LumA","LumB","Her2", "Basal"))
circosPlot_diablo(result, corThreshold=0.89)
heatmap_diablo(result, Y, legend1.x.y = c(0.75, 0.8), legend2.x.y=c(0.75, 0.55), margins = c(2, 15))
grid.newpage();
heatmap_diablo(result, Y, legend1.x.y = c(0.75, 0.8), legend2.x.y=c(0.75, 0.55), margins = c(2, 15))
library(VennDiagram)
grid.newpage();
heatmap_diablo(result, Y, legend1.x.y = c(0.75, 0.8), legend2.x.y=c(0.75, 0.55), margins = c(2, 15))
heatmap_diablo(result, Y, legend1.x.y = c(0.75, 0.8), legend2.x.y=c(0.75, 0.55), margins = c(2, 15))
#------------------------------------
#
# 4) Figure 1E: Pathway Enrichment Network
#
#------------------------------------
methAnnotation <- read.csv("~/Dropbox/Manuscript/1-data/manuscriptFiles/meth.common.450.27.csv", row.names = 1)
protAnnotation <- read.delim("~/Dropbox/Manuscript/1-data/manuscriptFiles/BRCA.antibody_annotation.txt", row.names = 2)
#library(devtools)
#install_github("cashoes/sear")
library(sear)
#library(networkD3)
geneList.diablo0 <- c(feat1$mRNA, as.character(methAnnotation[feat1$CpGs, "Gene_Symbol"]),
as.character(protAnnotation[feat1$Proteins, "Gene.Name"]))
geneList.diablo <- geneList.diablo0[!is.na(geneList.diablo0)]
# Perform enrichment analysis
genesetEnrich <- sear(input = geneList.diablo, type = "mrna")
## Network diagram
genesetEnrich %>% arrange(p_value) %>% slice(1:70) %>%
enrichPathwayNetwork_diablo()
genesetEnrich %>% filter(subcollection == "cp_kegg") %>%
arrange(p_value) %>% slice(1:50) %>% enrichPathwayNetwork_diablo()
genesetEnrich %>% arrange(p_value) %>% slice(1:70) %>%
enrichPathwayNetwork_diablo()
setwd("~/Dropbox/Manuscript/mixOmics.org:DIABLO/1-Data & Preprocessing/breastCancer/data")
#------------------------------------
#
# 4) Figure 1E: Pathway Enrichment Network
#
#------------------------------------
methAnnotation <- read.csv(paste0(WhereAmI, "1-Data & Preprocessing/breastCancer/data/meth.common.450.27.csv"), row.names = 1)
protAnnotation <- read.delim(paste0(WhereAmI, "1-Data & Preprocessing/breastCancer/data/BRCA.antibody_annotation.txt"), row.names = 2)
#library(devtools)
#install_github("cashoes/sear")
library(sear)
#library(networkD3)
geneList.diablo0 <- c(feat1$mRNA, as.character(methAnnotation[feat1$CpGs, "Gene_Symbol"]),
as.character(protAnnotation[feat1$Proteins, "Gene.Name"]))
geneList.diablo <- geneList.diablo0[!is.na(geneList.diablo0)]
# Perform enrichment analysis
genesetEnrich <- sear(input = geneList.diablo, type = "mrna")
## Network diagram
genesetEnrich %>% arrange(p_value) %>% slice(1:70) %>%
enrichPathwayNetwork_diablo()
genesetEnrich %>% filter(subcollection == "cp_kegg") %>%
arrange(p_value) %>% slice(1:50) %>% enrichPathwayNetwork_diablo()
